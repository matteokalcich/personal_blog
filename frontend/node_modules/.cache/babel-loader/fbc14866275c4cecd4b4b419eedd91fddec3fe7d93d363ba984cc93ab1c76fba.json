{"ast":null,"code":"var _jsxFileName = \"/Users/matteo/Documents/nodejs_login/frontend/src/components/react/PostList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = () => {\n  _s();\n  // Stato per la lista dei post e per eventuali errori\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Funzione per eseguire la richiesta\n  const filterRequest = async (parolaDaCercare, annoScelto) => {\n    setLoading(true); // Imposta loading su true mentre i dati vengono caricati\n    try {\n      const response = await fetch(`http://localhost:3000/api/filterRequest?ricercaParola=${parolaDaCercare}&ricercaAnno=${annoScelto}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (response.status === 200) {\n        setPosts(data.result); // Imposta i post ottenuti dal server\n      } else {\n        setError(data.message); // Gestisce l'errore dal server\n      }\n    } catch (error) {\n      console.error('Errore durante il filtro:', error);\n      setError('Errore del server.');\n    } finally {\n      setLoading(false); // Imposta loading su false dopo aver completato la richiesta\n    }\n  };\n\n  // Effettua la richiesta quando il componente è montato o quando cambiano le variabili di ricerca\n  useEffect(() => {\n    // Qui puoi passare i parametri che desideri (ad esempio 'test' per la ricerca parola e '2024' per l'anno)\n    filterRequest('test', '2024');\n  }, []); // L'array vuoto significa che il filtro viene eseguito solo una volta, al caricamento del componente\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lista dei Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Caricamento...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Errore: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: post.titoloPost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this), \" - \", post.descrizionePost, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 75\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: post.dataCreazione\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this)]\n      }, post.idPost, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nessun post trovato.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(PostList, \"o8IlHUe0xF30wYKjuv1rGRPeFf8=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","error","setError","loading","setLoading","filterRequest","parolaDaCercare","annoScelto","response","fetch","method","headers","data","json","status","result","message","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","map","post","titoloPost","descrizionePost","dataCreazione","idPost","_c","$RefreshReg$"],"sources":["/Users/matteo/Documents/nodejs_login/frontend/src/components/react/PostList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst PostList = () => {\n  // Stato per la lista dei post e per eventuali errori\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Funzione per eseguire la richiesta\n  const filterRequest = async (parolaDaCercare, annoScelto) => {\n    setLoading(true);  // Imposta loading su true mentre i dati vengono caricati\n    try {\n      const response = await fetch(\n        `http://localhost:3000/api/filterRequest?ricercaParola=${parolaDaCercare}&ricercaAnno=${annoScelto}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n\n      const data = await response.json();\n\n      if (response.status === 200) {\n        setPosts(data.result);  // Imposta i post ottenuti dal server\n      } else {\n        setError(data.message);  // Gestisce l'errore dal server\n      }\n    } catch (error) {\n      console.error('Errore durante il filtro:', error);\n      setError('Errore del server.');\n    } finally {\n      setLoading(false);  // Imposta loading su false dopo aver completato la richiesta\n    }\n  };\n\n  // Effettua la richiesta quando il componente è montato o quando cambiano le variabili di ricerca\n  useEffect(() => {\n    // Qui puoi passare i parametri che desideri (ad esempio 'test' per la ricerca parola e '2024' per l'anno)\n    filterRequest('test', '2024');\n  }, []);  // L'array vuoto significa che il filtro viene eseguito solo una volta, al caricamento del componente\n\n  return (\n    <div>\n      <h2>Lista dei Post</h2>\n\n      {loading && <p>Caricamento...</p>}\n\n      {error && <p style={{ color: 'red' }}>Errore: {error}</p>}\n\n      <ul>\n        {posts.length > 0 ? (\n          posts.map(post => (\n            <li key={post.idPost}>\n              <strong>{post.titoloPost}</strong> - {post.descrizionePost} <br />\n              <small>{post.dataCreazione}</small>\n            </li>\n          ))\n        ) : (\n          <p>Nessun post trovato.</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default PostList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}